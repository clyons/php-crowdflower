<?php

require_once dirname(__FILE__) . '/../../../lib/crowdflower.php';
require_once dirname(__FILE__) . '/CrowdFlower_AbstractGeneric.php';

/**
 * Test class for CrowdFlower_Order.
 * Generated by PHPUnit on 2011-03-11 at 15:22:23.
 */
class CrowdFlower_OrderTest extends CrowdFlower_AbstractGeneric {

    /**
     * @var CrowdFlower_Order
     */

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CrowdFlower_Order_Proxy($this->key);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        //delete jobs in the created_jobs array
        $this->_cleanUpJobs();

    }

    /**
     * fetch the job, count the units, order all of them
     */
    public function testCreate() {

        $jobID = $this->unorderedJobID;
        
        $job = CrowdFlower::factory("job", $this->key);
        $copy_resp = $job->copy($jobID, array('all_units' => 'true'));
        $copied_job_id = $copy_resp['response']->id;
        $this->created_jobs[]=$copied_job_id;
        $jobID = $copied_job_id;
        $this->_reportInfo(__METHOD__, $copy_resp);

        $get_resp = $job->get($jobID);
        $this->_reportInfo(__METHOD__, $get_resp);
        $times_tried = 0;
        while ($get_resp['response']->units_count == 0 && $times_tried < 5) {
            print "Waiting for units to show up for $jobID.  Attempts: $times_tried\n";
            sleep(2);
            $get_resp = $job->get($jobID);
            $times_tried++;
        }

        $this->debug=0;
        $this->_reportInfo(__METHOD__, $get_resp);

        $newtimeouts = array("CURLOPT_TIMEOUT" => 20,
                             "CURLOPT_CONNECTTIMEOUT" => 4);

        $this->object->setTimeouts($newtimeouts);

        /////////////////
        //this does work, but we don't want to be charged
        // expect 402 if you have no money in your account
        // if you have money in your account, YOU WILL BE CHARGED!!
//        $channels = array('mob', 'amt');
//        $create_resp = $this->object->create($jobID, $get_resp['response']->units_count, $channels);
////        $this->debug=1;
//        $this->_reportInfo(__METHOD__, $create_resp);
//
//        $this->assertEquals(402, $create_resp['info']['http_code']);


        /////////////////
        //expect 402 - canceled order will 402
	/**
         * this test tries to create units under a cancelled order and is blowing up for some reason after having worked for quite some time
         * taking out for now until I can look at it
         */
        //$channels = array('mob');
        //$create_resp = $this->object->create($this->canceledJobID, $get_resp['response']->units_count, $channels);
        //$this->debug=0;
        //$this->_reportInfo(__METHOD__, $create_resp);

        //$this->assertEquals(402, $create_resp['info']['http_code']);
        
        ///////////////
        // expect 200 - if the order is valid.  'mob' doesn't require any money
        $channels = array('mob');
        $create_resp = $this->object->create($jobID, $get_resp['response']->units_count, $channels);
        $this->debug=0;
        $this->_reportInfo(__METHOD__, $create_resp);

        $this->assertEquals(200, $create_resp['info']['http_code']);
        //ok, lets cancel it
        $cancel_resp = $job->cancel($get_resp['response']->id);
        $this->created_jobs[] = $get_resp['response']->id;

    }

    public function test_createURL() {
        $id = 6666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_createURL($id));
    }

//    /**
//     * @todo Implement testGet().
//     */
//    public function testGet() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    public function test_getURL() {
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//
//    }

}

Class CrowdFlower_Order_Proxy extends CrowdFlower_Order {
//    public function  _getURL($id="") {
//        return parent::_getURL($id);
//    }

    public function  _createURL($data) {
        return parent::_createURL($data);
    }
}

?>
