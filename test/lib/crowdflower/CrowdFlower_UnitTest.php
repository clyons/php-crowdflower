<?php

require_once dirname(__FILE__) . '/../../../lib/crowdflower.php';
require_once dirname(__FILE__) . '/CrowdFlower_AbstractGeneric.php';

/**
 * Test class for CrowdFlower_Unit.
 * Generated by PHPUnit on 2011-03-12 at 15:45:24.
 */
class CrowdFlower_UnitTest extends CrowdFlower_AbstractGeneric {
    protected $filename = "/tmp/crowdflower_unit_test_split_file.csv";


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CrowdFlower_Unit_Proxy($this->key);

        //taken from the API doc
        //http://crowdflower.com/docs/api/units/#bulk_split
        $filedata=<<<_EOT_
author,major_works,countries_active
Homer,The Iliad|The Odyssey,Greece
Dickens,David Copperfield|Bleak House,England
Nabokov,Camera Obscura|Lolita,Russia|United States
Rabelais,Gargantua and Pantagruel,France
Cervantes,Don Quixote,Spain
_EOT_;

        file_put_contents($this->filename, $filedata);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        //lets clean up
        $get_resp = $this->object->get($this->jobID);

        if (is_array($get_resp) && is_object($get_resp['response'])) {
            foreach($get_resp['response'] as $key => $value) {
                $del_resp = $this->object->delete($this->jobID, $key);
                //print_r($del_resp);
            }
        }

        if (file_exists($this->filename)) {
            unlink($this->filename);
        }

    }

    /**
     * 
     */
    public function testCreate() {
        // Remove the following lines when you implement this test.
        $data = array('data' => array('somekey1' => 'somevalue1'
                                    ,'somekey2' => 'somevalue2'
                                    ,'somekey3' => 'somevalue3'
            ));

        $resp = $this->object->create($this->jobID,$data);
        $this->assertEquals(200,$resp['info']['http_code']);

        //bad jobID, should 404
        $jID=66;
        $resp = $this->object->create($jID,$data);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals(404,$resp['info']['http_code']);

    }

    /**
     * 
     */
    public function testGet() {

        $data = array('data' =>array('somekey1' => 'somevalue1'));
        
        //create, pull out Id, then fetch the ID, expect 200
        $create_resp = $this->object->create($this->jobID,$data);
        $this->_reportInfo(__METHOD__, $create_resp);
        //print "CREATE ID is: " . $create_resp['response']->id;
        $get_resp = $this->object->get($this->jobID, $create_resp['response']->id);
        $this->_reportInfo(__METHOD__, $create_resp);
        $this->assertEquals(200,$get_resp['info']['http_code']);


        //this should 404 as that unit id doesn't exist
        $unitID = 64603639;
        $resp = $this->object->get($this->jobID, $unitID);
        $this->_reportInfo(__METHOD__, $resp);

        $this->assertEquals(404,$resp['info']['http_code']);

        //no unit id, returns all ids
        $resp = $this->object->get($this->jobID);
        $this->_reportInfo(__METHOD__, $resp);

//        //iterate through the keys
//        foreach ($resp['response'] as $key => $value) {
//            print $key. "\n";
//        }

        $this->assertEquals(200,$resp['info']['http_code']);

    }

    /**
     *
     * Super simple =>0
     * Easy => 2
     * Clever => 4
     * Challenging => 6
     * Difficult => 8
     *
     */
    public function testUpdate() {

        $data = array('data' =>array('somekey1' => 'somevalue1'));

        //create, pull out Id, then fetch the ID
        $create_resp = $this->object->create($this->jobID,$data);
        $this->_reportInfo(__METHOD__, $create_resp);

        //now update it
        $data = array('difficulty' => 8, "golden" => true);
        $update_resp = $this->object->update($this->jobID,$create_resp['response']->id, $data);
        $this->_reportInfo(__METHOD__, $update_resp);

        $this->assertEquals(200,$update_resp['info']['http_code']);
    }

    /**
     * do a create, a get and then delete the unit
     * then, try to delete it again
     */
    public function testDelete() {
        //create a unit, then delete it
        $data = array('data' =>array('somekey1' => 'somevalue1'));
        $create_resp = $this->object->create($this->jobID, $data);
        $this->_reportInfo(__METHOD__, $create_resp);

        //ok, now delete it
        $del_resp = $this->object->delete($this->jobID, $create_resp['response']->id);
        $this->_reportInfo(__METHOD__, $del_resp);
        $this->assertEquals(200,$del_resp['info']['http_code']);

        //if we can't delete a unit, they return a 404
        $unitID = 64603646;
        $del_resp = $this->object->delete($this->jobID, $unitID);
        $this->_reportInfo(__METHOD__, $del_resp);
        $this->assertEquals(404,$del_resp['info']['http_code']);

    }

    /**
     * this test isn't totally valid, we probably need a bigger data set
     * $resp['response']->done = true/false
     * $resp['response']->count = num processed
     * $resp['response']->error = if it failed, done will be false and error
     * will be present and contain message
     * http://crowdflower.com/docs/api/units/#response
     */
    public function testPing() {
        $upload_data['file'] = $this->filename;
        $upload_data['content-type'] = "text/csv";
        $upload_data['id'] = $this->jobID;

        $job = CrowdFlower::factory('job', $this->key);
        $upload_resp = $job->upload($upload_data);
        $this->_reportInfo(__METHOD__, $upload_resp);

        $ping_resp = $this->object->ping($this->jobID);
        $this->_reportInfo(__METHOD__, $ping_resp);
        $this->assertEquals(200,$ping_resp['info']['http_code']);

        //should 404
        $ping_resp = $this->object->ping(777777);
        $this->_reportInfo(__METHOD__, $ping_resp);
        $this->assertEquals(404,$ping_resp['info']['http_code']);

    }

    /**
     * create a unit and try to cancel it
     * to do this right (which I didn't do here):
     * we would create a job, add units, order it
     * on the internal interface (no money required), fetch all the units, cancel one
     */
    public function testCancel() {

        $data = array('data' =>array('somekey1' => 'somevalue1'));

        //create, pull out Id, then fetch the ID, expect 200
        $create_resp = $this->object->create($this->jobID,$data);
        $this->_reportInfo(__METHOD__, $create_resp);

        $cancel_resp = $this->object->cancel($this->jobID, $create_resp['response']->id);
        $this->debug=0;
        $this->_reportInfo(__METHOD__, $cancel_resp);

        $this->assertEquals(200, $cancel_resp['info']['http_code']);

        //try to cancel an invalid id
        $cancel_resp = $this->object->cancel($this->jobID, 77777);
        $this->_reportInfo(__METHOD__, $cancel_resp);

        $this->assertEquals(404, $cancel_resp['info']['http_code']);

        //check that the error element is set
        $this->assertTrue(!empty($cancel_resp['response']->error) && strlen($cancel_resp['response']->error));

    }

    /**
     * instantiate job object
     * upload csv file $this->filename
     * then do the split
     */
    public function testSplit() {
        $upload_data['file'] = $this->filename;
        $upload_data['content-type'] = "text/csv";
        $upload_data['id'] = $this->jobID;

        $job = CrowdFlower::factory('job', $this->key);
        $upload_resp = $job->upload($upload_data);
        $this->_reportInfo(__METHOD__, $upload_resp);

        $split_data = array('on' => 'major_works,countries_active', 'with' => '|');
        $split_resp = $this->object->split($this->jobID, $split_data);
        $this->_reportInfo(__METHOD__, $split_resp);

        $this->assertEquals(200,$split_resp['info']['http_code']);

    }

    //test urls
    public function test_createURL() {
        $id = 6666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_createURL($id));
    }

    public function test_getURL() {
        $id = 6666;
        $unitid = 7777;

        //with unitID
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $unitid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_getURL($id, $unitid));

        //without unitID
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource()
                . '.' . $this->object->getFormat();
        $this->assertEquals($expected,$this->object->_getURL($id));
    }

    public function test_deleteURL() {
        $id = 6666;
        $unitid = 7777;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $unitid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');


        $this->assertEquals($expected,$this->object->_deleteURL($id, $unitid));

    }

    public function test_updateURL() {
        $id = 6666;
        $unitid = 7777;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $unitid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');


        $this->assertEquals($expected,$this->object->_updateURL($id, $unitid));

    }

    public function test_pingURL() {
        $id = 6666;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'.  'ping' . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_pingURL($id));

    }

    public function test_cancelURL() {
        $id = 6666;
        $unitid = 7777;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $unitid . '/' . 'cancel' . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_cancelURL($id, $unitid));

    }

    public function test_splitURL() {
        $id = 6666;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'.  'split' . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_splitURL($id));

    }

}


Class CrowdFlower_Unit_Proxy extends CrowdFlower_Unit {
    public function  _getURL($jobID, $unitID="") {
        return parent::_getURL($jobID, $unitID);
    }

    public function  _createURL($jobID) {
        return parent::_createURL($jobID);
    }

    public function  _updateURL($jobID, $unitID) {
        return parent::_updateURL($jobID, $unitID);
    }

    public function  _deleteURL($jobID, $unitID) {
        return parent::_deleteURL($jobID, $unitID);
    }

    public function  _pingURL($jobID)  {
        return parent::_pingURL($jobID);
    }

    public function _cancelURL($jobID, $unitID)  {
        return parent::_cancelURL($jobID, $unitID);
    }

    public function _splitURL($jobID)  {
        return parent::_splitURL($jobID);
    }
}

?>
