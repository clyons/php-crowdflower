<?php

require_once dirname(__FILE__) . '/../../../lib/crowdflower.php';
require_once dirname(__FILE__) . '/CrowdFlower_AbstractGeneric.php';

/**
 * Test class for CrowdFlower_Common.
 * Generated by PHPUnit on 2011-02-28 at 13:59:31.
 */
class CrowdFlower_CommonTest extends CrowdFlower_AbstractGeneric {
//    class CrowdFlower_CommonTest extends PHPUnit_Framework_TestCase {

    /**
     * @var CrowdFlower_Common
     */
    protected $object;
    protected $testUrl = "http://sports.yahoo.com";
    protected $testAPIUri = "http://api.crowdflower.com";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CrowdFlower_Common_Proxy();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * 
     */
    public function testSendRequest() {
        $this->object->setUri($this->testUrl);
        $this->object->setFormat("html");
        $endpoint="nhl";
        $method="GET";
        $data="";
        $resp = $this->object->sendRequest($this->object->getUri() . '/' . $endpoint, $method);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals("200",$resp['info']['http_code']);
        //TODO, more elaborate testing to test the different methods
        
    }

    public function testPrefixDataKeys() {
        $expected = array("prefix[key]" => "value");
        $data = array("key" => "value");
        $prefix = "prefix";
        $newdata = $this->object->prefixDataKeys($data,$prefix);
        $this->_reportInfo(__METHOD__, $newdata);
        $this->assertEquals($expected,$newdata);
    }
    /**
     * @todo Implement testVerifyResponse().
     */
    public function testVerifyResponse() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }



    /**
     * tests get and set format.
     */
    public function testGetFormat() {
        $this->object->setFormat("xml");
        $this->assertEquals("xml",$this->object->getFormat());
    }


    /**
     * tests get and set
     */
    public function testGetApiKey() {
        $this->object->setApiKey("foobar");
        $this->assertEquals("foobar",$this->object->getApiKey());
    }


    /**
     * tests get and set
     */
    public function testGetUri() {
        $this->object->setUri("foobar");
        $this->assertEquals("foobar",$this->object->getUri());
    }

    /**
     * set and get version
     */
    public function testGetVersion() {
        // Remove the following lines when you implement this test.
        $this->object->setVersion(1);
        $this->assertEquals(1,$this->object->getVersion());
    }

    /**
     * 
     */
    public function testGetTimeouts() {

        $newtimeouts = array("CURLOPT_TIMEOUT" => 20,
                             "CURLOPT_CONNECTTIMEOUT" => 4);

        $this->object->setTimeouts($newtimeouts);

        $this->assertEquals($newtimeouts,$this->object->getTimeouts());

    }

    public function test_baseURL() {
        $this->object->setUri($this->testAPIUri);
        $this->object->setVersion(1);
        $expected = $this->testAPIUri . '/v1';
        $actual = $this->object->_baseURL();
        $this->assertEquals($expected,$actual);
    }

}


class CrowdFlower_Common_Proxy extends CrowdFlower_Common {
    public function  prefixDataKeys($data, $prefix) {
        return parent::prefixDataKeys($data, $prefix);
    }
}

?>
