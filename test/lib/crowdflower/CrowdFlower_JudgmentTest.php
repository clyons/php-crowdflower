<?php

require_once dirname(__FILE__) . '/../../../lib/crowdflower.php';
require_once dirname(__FILE__) . '/CrowdFlower_AbstractGeneric.php';

/**
 * Test class for CrowdFlower_judgment.
 * Generated by PHPUnit on 2011-03-13 at 11:41:01.
 */
class CrowdFlower_JudgmentTest extends CrowdFlower_AbstractGeneric {

    /**
     * @var CrowdFlower_judgment
     */

    protected $data = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CrowdFlower_Judgment_Proxy($this->key);
        $this->data[0] = 'mob';
        $job = CrowdFlower::factory('job', $this->key);
        //set the channel to mob
        $resp = $job->channels($this->jobID, $this->data);
        //print_r($resp);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @note, I believe this should work, but doesn't, commenting out
     */
    /**
    public function testCreate() {

        $create_data['data'] = array('somekey1' => 'somevalue1');
        $create_data['country'] = 'IND';

        $create_resp = $this->object->create($this->jobID, $create_data);
        $this->debug=1;
        $this->_reportInfo(__METHOD__, $create_resp);
        $this->assertEquals(200,$create_resp['info']['http_code']);
    }
    **/

    /**
     * 
     */
    public function testGet() {
        //404, invalid ID
        $judgmentid = 6666;
        $get_resp = $this->object->get($this->jobID, $judgmentid);
//        $this->debug=1;
        $this->_reportInfo(__METHOD__, $get_resp);
        $this->assertEquals(404,$get_resp['info']['http_code']);

    }

    /**
     * 
     */
    public function testUpdate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testDelete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testDownload() {
        
        //job id not valid, 404
        $jobID = 6666;
        $d['file'] = '/tmp/crowdflower_unit_downloaded_file_' . $jobID . '.zip';

        $resp = $this->object->download($jobID, $d['file'], "true");
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals(404,$resp['info']['http_code']);

        //custom id
        $jobID = $this->finishedJobID;
        $d['file'] = '/tmp/crowdflower_unit_downloaded_file_' . $jobID . '.zip';
        if (file_exists($d['file'])) {
            unlink($d['file']);
        }
        
        //may need to increase the curl times
        $resp = $this->object->download($jobID, $d['file'], "true");
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals(200,$resp['info']['http_code']);
        $this->assertTrue(file_exists($d['file']) && filesize($d['file']));
    }


    public function test_createURL() {
        $id = 6666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_createURL($id));
    }

    public function test_getURL() {
        $id = 6666;
        $judgmentid = 7777;

        //with judgmentid
        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $judgmentid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_getURL($id, $judgmentid));

    }

    public function test_deleteURL() {
        $id = 6666;
        $judgmentid = 7777;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $judgmentid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');


        $this->assertEquals($expected,$this->object->_deleteURL($id, $judgmentid));

    }

    public function test_updateURL() {
        $id = 6666;
        $judgmentid = 7777;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '/' . $this->object->getResource() .
                '/'. $judgmentid . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');


        $this->assertEquals($expected,$this->object->_updateURL($id, $judgmentid));

    }

    public function test_downloadURL() {
        $id = 6666;

        $expected = $this->object->_baseURL() . '/' . $this->object->getParentResource()
                . '/'. $id . '.csv?full=false';

        $this->object->setApiKey('my_api_key');

        $this->assertEquals($expected,$this->object->_downloadURL($id, "false"));

    }

}


Class CrowdFlower_Judgment_Proxy extends CrowdFlower_Judgment {

    public function  _getURL($jobID, $judgmentID) {
        return parent::_getURL($jobID, $judgmentID);
    }

    public function  _createURL($jobID) {
        return parent::_createURL($jobID);
    }

    public function  _updateURL($jobID, $judgmentID) {
        return parent::_updateURL($jobID, $judgmentID);
    }

    public function  _deleteURL($jobID, $judgmentID) {
        return parent::_deleteURL($jobID, $judgmentID);
    }

    public function  _downloadURL($jobID, $full)  {
        return parent::_downloadURL($jobID, $full);
    }

}

?>
