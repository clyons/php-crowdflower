<?php

require_once dirname(__FILE__) . '/../../../lib/crowdflower.php';
require_once dirname(__FILE__) . '/CrowdFlower_AbstractGeneric.php';

/**
 * Test class for CrowdFlower_Job.
 * Generated by PHPUnit on 2011-02-26 at 09:37:40.
 */
class CrowdFlower_JobTest extends CrowdFlower_AbstractGeneric {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CrowdFlower_Job_Proxy($this->key);
        $this->data = array(
                "cml" => urlencode("<h2>Sample Job</h2><P>This is a sample job</P>")
                ,"instructions" => "These are sample instructions"
                ,"judgments_per_unit" => "3"
                ,"max_judgments_per_unit" => "4"
                ,"max_judgments_per_worker" => "1"
                ,"title" => "Unit_Test_Job"
                ,"units_per_assignment" => "1"
                ,"webhook_uri" => "http://www.example.com/post.php"
            );

        //create a temp file that we can use to test uploads
        file_put_contents($this->temp_file, "test_data\n\"my sample data\"");

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        //delete temp file
        if (file_exists($this->temp_file)) {
            unlink($this->temp_file);
        }

        $this->_cleanUpJobs();
    }

    /**
     *
     */
    public function testUpload() {

        $expected = 200;

        $upload_data['file'] = $this->temp_file;
        $upload_data['content-type'] = "text/csv";

        $resp = $this->object->upload($upload_data);


        $this->assertEquals($expected,$resp['info']['http_code']);
        $this->_reportInfo(__METHOD__, $resp);
        $this->created_jobs[]=$resp['response']->id;

    }


    /**
     * 
     */
    public function testCreate() {

        $expected = 200;
        
        $resp = $this->object->create($this->data);
        $this->debug=0;
        $this->_reportInfo(__METHOD__, $resp);

        $this->assertEquals($expected,$resp['info']['http_code']);
        $this->created_jobs[] = $resp['response']->id;

        $this->_reportInfo(__METHOD__, $resp);

    }

    public function testGet() {

        $expected = 200;

        $resp = $this->object->get();

        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);
        
        //with an ID
        $resp = $this->object->get($this->unorderedJobID);
        $this->assertEquals($expected,$resp['info']['http_code']);
    }

    public function testDelete() {
        $expected = 200;
        //create a new job
        $resp = $this->object->create(array());
        $this->_reportInfo(__METHOD__, $resp);
        
        $delresp = $this->object->delete($resp['response']->id);
        $this->_reportInfo(__METHOD__, $delresp);


        $this->assertEquals($expected,$delresp['info']['http_code']);
        
    }

    public function testUpdate() {
        $expected = 5;
        $str = '<cml:text label="Text" class="" validates="required integer"/>';

        //create a job for our test
        $resp = $this->object->create(array("title" => "Unit_Test_Job", "instructions" => "Instructions"));
        
        //this is what we'll update it with
        $data = array("cml" => urlencode($str), "judgments_per_unit" => 5, "instructions" => "Update Instructions");

        //do the update
        $updateresp = $this->object->update($resp['response']->id, $data);

        $this->_reportInfo(__METHOD__, $resp);
        $this->_reportInfo(__METHOD__, $updateresp);

	/**
        //did the judgements update?
        $this->assertEquals($expected,$updateresp['response']->judgments_per_unit);
	**/

        //status code
        $this->assertEquals(200, $updateresp['info']['http_code']);

        //housekeeping
        $this->created_jobs[] = $resp['response']->id;
        
    }


    public function testPing() {
        $expected = 200;

        $resp = $this->object->ping($this->unorderedJobID);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);
    }

    public function testPause() {

        $expected = 200;

        $resp = $this->object->pause($this->runningJobID);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);

        $resp = $this->object->resume($this->runningJobID);

    }

    public function testResume() {
        $expected = 200;

        $resp = $this->object->pause($this->runningJobID);
        $resp = $this->object->resume($this->runningJobID);
        $this->assertEquals($expected,$resp['info']['http_code']);

    }

    /**
     * copy unordered job, order it, then cancel it
     */
    public function testCancel() {
        $expected = 200;

        $job = CrowdFlower::factory('job', $this->key);

        $copy_resp = $job->copy($this->unorderedJobID, array('all_units' => 'true'));
        $jobID = $copy_resp['response']->id;
        $this->created_jobs[] = $jobID;

        //order it
        $order = CrowdFlower::factory('order', $jobID);
        $order_resp = $order->create($jobID, 1, array('mob'));
        $this->debug=0;
        $this->_reportInfo(__METHOD__, $order_resp);

        $resp = $this->object->cancel($jobID);
        $this->debug=0;
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);
        
    }

    public function testLegend() {
        $expected = 200;

        $resp = $this->object->legend($this->unorderedJobID);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);

    }

    public function testCopy() {
        $expected = 200;

        $data['title'] = "My copied job";

        $resp = $this->object->copy($this->unorderedJobID, $data);
        $this->assertEquals($expected,$resp['info']['http_code']);
        $this->created_jobs[]=$resp['response']->id;
        $this->_reportInfo(__METHOD__, $resp);
        
        $this->assertEquals(200,$resp['info']['http_code']);
        $this->created_jobs[]=$resp['response']->id;
    }

    public function testGold() {
        $expected = 200;

        $data['reset'] = "true";

        $resp = $this->object->gold($this->unorderedJobID, $data);
        $this->assertEquals($expected,$resp['info']['http_code']);
        $this->_reportInfo(__METHOD__, $resp);

    }

    public function testChannels() {
        $id = $this->unorderedJobID;
        $expected = 200;

        //GET
        $data = array();
        $resp = $this->object->channels($id, $data);
        $this->_reportInfo(__METHOD__, $resp);
        $this->assertEquals($expected,$resp['info']['http_code']);

        //PUT
        $data = null;
        $data[0] = "mob"; //mob is the internal interface, and is free, just for testing
        
        $resp = $this->object->channels($id, $data);
        $this->_reportInfo(__METHOD__, $resp);

        $this->assertEquals($expected,$resp['info']['http_code']);
    }


    public function test_pingURL() {

        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'ping' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_pingURL($id));

    }
    
    public function test_pauseURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'pause' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_pauseURL($id));
    }

    public function test_resumeURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'resume' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_resumeURL($id));
    }

    public function test_cancelURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'cancel' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_cancelURL($id));
    }

    public function test_copyURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'copy' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_copyURL($id));
    }

    public function test_legendURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'legend' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_legendURL($id));
    }

    public function test_getURL() {
        $id = 66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
                '/66666' . '.' .
                $this->object->getFormat();
        $this->object->setApiKey($this->key);
        //test with an id
        $this->assertEquals($expected,$this->object->_getURL($id));


        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
                '.' . $this->object->getFormat();
        $this->object->setApiKey($this->key);
        //test without an id
        $this->assertEquals($expected,$this->object->_getURL());
    }

    public function test_createURL() {
        $data = array();
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
                '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');
//        print "Expecting: $expected";
        $this->assertEquals($expected,$this->object->_createURL($data));
        
    }

    public function test_updateURL() {
        $id = 66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');
//        print "Expecting: $expected";
        $this->assertEquals($expected,$this->object->_updateURL($id));
    }

    public function test_deleteURL() {
        $id = 66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '.' . $this->object->getFormat();
        $this->object->setApiKey('my_api_key');
//        print "Expecting: $expected";
        $this->assertEquals($expected,$this->object->_deleteURL($id));
    }

    public function test_uploadURL() {
        $data = array("id" => 66666);
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $data['id']  . '/' . 'upload' . '.' . $this->object->getFormat();
        
        $this->assertEquals($expected,$this->object->_uploadURL($data));
    }

    public function test_goldURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'gold' . '.' . $this->object->getFormat();

        $this->assertEquals($expected,$this->object->_goldURL($id));
    }

    public function test_channelsURL() {
        $id=66666;
        $expected = $this->object->_baseURL() . '/' . $this->object->getResource() .
          '/' . $id  . '/' . 'channels';

        $this->assertEquals($expected,$this->object->_channelsURL($id));
    }

}



//need a proxy to get to the protected methods
Class CrowdFlower_Job_Proxy extends CrowdFlower_Job {
    public function  _getURL($id="") {
        return parent::_getURL($id);
    }

    public function  _createURL($data) {
        return parent::_createURL($data);
    }

    public function  _updateURL($id) {
        return parent::_updateURL($id);
    }

    public function  _deleteURL($data) {
        return parent::_deleteURL($data);
    }

    public function  _uploadURL($data) {
        return parent::_uploadURL($data);
    }

    public function  _pauseURL($id)  {
        return parent::_pauseURL($id);
    }

    public function  _pingURL($id)  {
        return parent::_pingURL($id);
    }

    public function  _resumeURL($id)  {
        return parent::_resumeURL($id);
    }

    public function _cancelURL($id)  {
        return parent::_cancelURL($id);
    }

    public function _copyURL($id)  {
        return parent::_copyURL($id);
    }

    public function _legendURL($id)  {
        return parent::_legendURL($id);
    }

    public function _goldURL($id)  {
        return parent::_goldURL($id);
    }

    public function _channelsURL($id)  {
        return parent::_channelsURL($id);
    }
}

?>
